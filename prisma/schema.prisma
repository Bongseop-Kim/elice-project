generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  phoneNumber   String
  role          Role
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userLat       Float?
  userLon       Float?

  hospital   Hospital? @relation(fields: [hospitalId], references: [id])
  hospitalId String?   @unique

  adminVerified     Boolean?
  address           String?
  favoriteHospitals Favorite[]
  haveKid           Kid[]
  review            Reviews[]
  reserved          Reservation[]
}

enum Role {
  client
  manager
  admin
}

model Kid {
  id       Int     @id @default(autoincrement())
  parent   User    @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int
  name     String?
  gender   Gender?
  birth    String?
  memo     String?
  image    Image?
}

enum Gender {
  male
  female
}

model Reservation {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  hospital     Hospital @relation(fields: [hospitalId], references: [id])
  hospitalId   String
  memo         String?
  reservedTime String
  reservedDate DateTime
  read         Boolean  @default(false)
  createdAt    DateTime @default(now())
}

model Reviews {
  id         Int      @id @default(autoincrement())
  poster     User     @relation(fields: [posterId], references: [id], onDelete: Cascade)
  posterId   Int
  hospital   Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  hospitalId String
  vote       Vote?
}

enum Vote {
  kindDoctor
  professional
  kindEmployee
  goodReceipt
  cleanHospital
  goodTraffic
}

model Favorite {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  hospital   Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  hospitalId String
}

model Hospital {
  id             String        @id
  dutyAddr       String
  dutyAddr1Depth String
  dutyAddr2Depth String
  dutyAddr3Depth String
  // dutyDiv String
  // dutyDivNam String
  // dutyEmcls String?
  // dutyEmclsName String?
  // dutyEryn Int?
  dutyEtc        String?
  // dutyInf        String?
  // dutyMapimg     String?
  dutyName       String
  dutyTel1       String?
  // dutyTel3       String?
  dutyTime1c     String?
  dutyTime1s     String?
  dutyTime2c     String?
  dutyTime2s     String?
  dutyTime3c     String?
  dutyTime3s     String?
  dutyTime4c     String?
  dutyTime4s     String?
  dutyTime5c     String?
  dutyTime5s     String?
  dutyTime6c     String?
  dutyTime6s     String?
  dutyTime7c     String?
  dutyTime7s     String?
  dutyTime8c     String?
  dutyTime8s     String?
  dutyTime9c     String?
  dutyTime9s     String?
  notice         String?
  wgs84Lat       Float?
  wgs84Lon       Float?
  favorited      Favorite[]
  reviews        Reviews[]
  reservations   Reservation[]
  admin          User?
  image          Image[]
}

model Image {
  id Int @id @default(autoincrement())

  imageUrl String

  kid   Kid? @relation(fields: [kidId], references: [id], onDelete: Cascade)
  kidId Int? @unique

  hospital   Hospital? @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  hospitalId String?
}
