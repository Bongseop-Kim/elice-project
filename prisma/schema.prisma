generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  phoneNumber   String
  role          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  hospital   Hospital? @relation(fields: [hospitalId], references: [id])
  hospitalId String? @unique

  adminVerified     String?
  address           String?
  favoriteHospitals Favorate[]
  haveChild         Child[]
  review            Reviews[]
  reserved          Reservation[]
}

model Child {
  id          Int           @id @default(autoincrement())
  parent      User          @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId    Int
  name        String
  gender      String
  birth       String
  img         String?
  memo        String?
  reservation Reservation[]
  image       Image[]
}

model Reservation {
  id                Int      @id @default(autoincrement())
  whosReservation   User     @relation(fields: [whosReservationId], references: [id], onDelete: Cascade)
  whosReservationId Int
  isUsersChild      Child?   @relation(fields: [isUsersChildId], references: [id])
  isUsersChildId    Int
  hospital          Hospital @relation(fields: [hospitalId], references: [id])
  hospitalId        String
  time              String
  memo              String
}

model Reviews {
  id         Int      @id @default(autoincrement())
  poster     User     @relation(fields: [posterId], references: [id], onDelete: Cascade)
  posterId   Int
  hospital   Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  hospitalId String
  vote       Int
}

model Favorate {
  id         Int      @id @default(autoincrement())
  poster     User     @relation(fields: [posterId], references: [id], onDelete: Cascade)
  posterId   Int
  hospital   Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  hospitalId String
}

model Hospital {
  id String @id
  dutyAddr String
  dutyAddr1Depth String
  dutyAddr2Depth String
  dutyAddr3Depth String
  // dutyDiv String
  // dutyDivNam String
  // dutyEmcls String?
  // dutyEmclsName String?
  // dutyEryn Int?
  dutyEtc String?
  dutyInf String?
  dutyMapimg String?
  dutyName String
  dutyTel1 String
  dutyTel3 String?
  startLunch String?
  endLunch String?
  dutyTime1c String?
  dutyTime1s String?
  dutyTime2c String?
  dutyTime2s String?
  dutyTime3c String?
  dutyTime3s String?
  dutyTime4c String?
  dutyTime4s String?
  dutyTime5c String?
  dutyTime5s String?
  dutyTime6c String?
  dutyTime6s String?
  dutyTime7c String?
  dutyTime7s String?
  dutyTime8c String?
  dutyTime8s String?
  wgs84Lat Float
  wgs84Lon Float
  imageId Int? 
  favorated     Favorate[]
  reviews       Reviews[]
  reservations  Reservation[]
  admin       User?
  images Image[]
}

model Image {
  id Int @id @default(autoincrement())

  type String
  imageUrl String

  child Child? @relation(fields: [childId],references: [id])
  childId Int
  
  hospital Hospital? @relation(fields: [hospitalId], references: [id])
  hospitalId String?
}
 
